// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseURL: string;
};

export type GeoCoordinateSchema = {
  /**
   * 纬度
   */
  lat: number;
  /**
   * 经度
   */
  lng: number;
};

export type SentimentEventSchema = {
  /**
   * 事件唯一标识符
   */
  id: string;
  /**
   * 事件标题
   */
  title: string;
  /**
   * 事件详细内容描述
   */
  content: string;
  /**
   * 情感倾向：positive(正面)、negative(负面)、neutral(中性)
   */
  sentiment: 'positive' | 'negative' | 'neutral';
  /**
   * 情感分数，范围通常为-1到1，负数表示负面情感
   */
  score: number;
  /**
   * 事件发生的地理位置坐标
   */
  location: GeoCoordinateSchema;
  /**
   * 事件发生的具体地址描述
   */
  address: string;
  /**
   * 信息来源媒体或平台
   */
  source: string;
  /**
   * 事件发生的时间戳
   */
  timestamp: string;
  /**
   * 事件热度值，数值越高表示关注度越高
   */
  hotness: number;
  /**
   * 事件相关标签
   */
  tags?: Array<string>;
};

export type SentimentMetricsSchema = {
  /**
   * 总事件数量
   */
  totalPosts: number;
  /**
   * 正面情感事件占比（百分比）
   */
  positiveRatio: number;
  /**
   * 负面情感事件占比（百分比）
   */
  negativeRatio: number;
  /**
   * 中性情感事件占比（百分比）
   */
  neutralRatio: number;
  /**
   * 正面情感事件总数
   */
  totalPositive: number;
  /**
   * 负面情感事件总数
   */
  totalNegative: number;
  /**
   * 中性情感事件总数
   */
  totalNeutral: number;
};

export type HotWordSchema = {
  /**
   * 词汇内容
   */
  word: string;
  /**
   * 词汇出现频次
   */
  count: number;
  /**
   * 词汇整体情感倾向：positive(正面)、negative(负面)、neutral(中性)
   */
  sentiment: 'positive' | 'negative' | 'neutral';
};

export type SentimentTableItemSchema = {
  /**
   * 事件唯一标识符
   */
  id: string;
  /**
   * 事件标题
   */
  title: string;
  /**
   * 信息来源
   */
  source: string;
  /**
   * 情感倾向
   */
  sentiment: 'positive' | 'negative' | 'neutral';
  /**
   * 情感分数
   */
  score: number;
  /**
   * 事件时间
   */
  time: string;
};

export type CreateSentimentIntensityDto = {
  /**
   * 情感标题
   */
  title: string;
  /**
   * 情感强度值，范围 0.00-1.00
   */
  intensity: number;
  /**
   * 情感简介描述
   */
  description?: string;
};

export type SentimentIntensityResponseDto = {
  /**
   * 情感强度记录ID
   */
  id: number;
  /**
   * 情感标题
   */
  title: string;
  /**
   * 情感强度值
   */
  intensity: number;
};

export type UpdateSentimentIntensityDto = {
  [key: string]: unknown;
};

export type CreateSentimentEventDto = {
  /**
   * 事件标题
   */
  title: string;
  /**
   * 事件详细内容描述
   */
  content?: string;
  /**
   * 情感分数，范围 0.00 到 1.00，0表示最负面，1表示最正面，0.5为中性
   */
  score: number;
  /**
   * 纬度，支持7位小数精度
   */
  latitude: number;
  /**
   * 经度，支持7位小数精度
   */
  longitude: number;
  /**
   * 事件发生的具体地址描述
   */
  address?: string;
  /**
   * 信息来源媒体或平台
   */
  source: string;
  /**
   * 事件发生的时间戳
   */
  timestamp: string;
  /**
   * 事件热度值，范围1-10，数值越高表示关注度越高
   */
  hotness?: number;
  /**
   * 事件相关标签
   */
  tags?: Array<string>;
};

export type SentimentEventResponseDto = {
  /**
   * 事件唯一标识符
   */
  id: number;
  /**
   * 事件标题
   */
  title: string;
  /**
   * 情感分数，范围 0.00 到 1.00
   */
  score: number;
  /**
   * 信息来源媒体或平台
   */
  source: string;
  /**
   * 事件发生的时间戳
   */
  timestamp: string;
};

export type UpdateSentimentEventDto = {
  /**
   * 事件标题
   */
  title?: string;
  /**
   * 事件详细内容描述
   */
  content?: string;
  /**
   * 情感分数，范围 0.00 到 1.00，0表示最负面，1表示最正面，0.5为中性
   */
  score?: number;
  /**
   * 纬度，支持7位小数精度
   */
  latitude?: number;
  /**
   * 经度，支持7位小数精度
   */
  longitude?: number;
  /**
   * 事件发生的具体地址描述
   */
  address?: string;
  /**
   * 信息来源媒体或平台
   */
  source?: string;
  /**
   * 事件发生的时间戳
   */
  timestamp?: string;
  /**
   * 事件热度值，范围1-10，数值越高表示关注度越高
   */
  hotness?: number;
  /**
   * 事件相关标签
   */
  tags?: Array<string>;
};

export type CreateEventTypeDto = {
  /**
   * 事件类型代码，如 political, economic
   */
  code: string;
  /**
   * 事件类型名称，如 政治事件, 经济事件
   */
  name: string;
  /**
   * 事件类型详细描述
   */
  description?: string;
  /**
   * UI显示颜色代码，如 #ff6b6b
   */
  color?: string;
  /**
   * 是否启用该事件类型
   */
  isActive?: boolean;
  /**
   * 排序权重，数值越大排序越靠前
   */
  sortOrder?: number;
};

export type EventTypeResponseDto = {
  /**
   * 事件类型唯一标识
   */
  id: number;
  /**
   * 事件类型代码
   */
  code: string;
  /**
   * 事件类型名称
   */
  name: string;
  /**
   * UI显示颜色代码
   */
  color: string;
  /**
   * 是否启用
   */
  isActive: boolean;
  /**
   * 排序权重
   */
  sortOrder: number;
};

export type UpdateEventTypeDto = {
  /**
   * 事件类型代码，如 political, economic
   */
  code?: string;
  /**
   * 事件类型名称，如 政治事件, 经济事件
   */
  name?: string;
  /**
   * 事件类型详细描述
   */
  description?: string;
  /**
   * UI显示颜色代码，如 #ff6b6b
   */
  color?: string;
  /**
   * 是否启用该事件类型
   */
  isActive?: boolean;
  /**
   * 排序权重，数值越大排序越靠前
   */
  sortOrder?: number;
};

export type CreateMediaTypeDto = {
  /**
   * 媒体类型代码，如 government, self_media
   */
  code: string;
  /**
   * 媒体类型名称，如 政府部门, 自媒体
   */
  name: string;
  /**
   * 媒体类型详细描述
   */
  description?: string;
  /**
   * UI显示颜色代码，如 #ff6b6b
   */
  color?: string;
  /**
   * 可信度等级 1-10，数值越高可信度越高
   */
  credibilityLevel?: number;
  /**
   * 是否启用该媒体类型
   */
  isActive?: boolean;
  /**
   * 排序权重，数值越大排序越靠前
   */
  sortOrder?: number;
  /**
   * 父级媒体类型ID，支持层级分类
   */
  parentId?: number;
};

export type MediaTypeResponseDto = {
  /**
   * 媒体类型唯一标识
   */
  id: number;
  /**
   * 媒体类型代码
   */
  code: string;
  /**
   * 媒体类型名称
   */
  name: string;
  /**
   * UI显示颜色代码
   */
  color: string;
  /**
   * 可信度等级
   */
  credibilityLevel: number;
  /**
   * 是否启用
   */
  isActive: boolean;
  /**
   * 排序权重
   */
  sortOrder: number;
  /**
   * 父级媒体类型ID
   */
  parentId: number;
};

export type UpdateMediaTypeDto = {
  /**
   * 媒体类型代码，如 government, self_media
   */
  code?: string;
  /**
   * 媒体类型名称，如 政府部门, 自媒体
   */
  name?: string;
  /**
   * 媒体类型详细描述
   */
  description?: string;
  /**
   * UI显示颜色代码，如 #ff6b6b
   */
  color?: string;
  /**
   * 可信度等级 1-10，数值越高可信度越高
   */
  credibilityLevel?: number;
  /**
   * 是否启用该媒体类型
   */
  isActive?: boolean;
  /**
   * 排序权重，数值越大排序越靠前
   */
  sortOrder?: number;
  /**
   * 父级媒体类型ID，支持层级分类
   */
  parentId?: number;
};

export type AppControllerGetHelloData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api';
};

export type AppControllerGetHelloResponses = {
  200: unknown;
};

export type SentimentControllerGetAllEventsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/sentiment/events';
};

export type SentimentControllerGetAllEventsResponses = {
  /**
   * 成功获取舆情事件列表
   */
  200: Array<SentimentEventSchema>;
};

export type SentimentControllerGetAllEventsResponse =
  SentimentControllerGetAllEventsResponses[keyof SentimentControllerGetAllEventsResponses];

export type SentimentControllerGetEventByIdData = {
  body?: never;
  path: {
    /**
     * 舆情事件的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/sentiment/events/{id}';
};

export type SentimentControllerGetEventByIdErrors = {
  /**
   * 未找到指定ID的舆情事件
   */
  404: unknown;
};

export type SentimentControllerGetEventByIdResponses = {
  /**
   * 成功获取舆情事件详情
   */
  200: SentimentEventSchema;
};

export type SentimentControllerGetEventByIdResponse =
  SentimentControllerGetEventByIdResponses[keyof SentimentControllerGetEventByIdResponses];

export type SentimentControllerGetMetricsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/sentiment/metrics';
};

export type SentimentControllerGetMetricsResponses = {
  /**
   * 成功获取舆情统计指标
   */
  200: SentimentMetricsSchema;
};

export type SentimentControllerGetMetricsResponse =
  SentimentControllerGetMetricsResponses[keyof SentimentControllerGetMetricsResponses];

export type SentimentControllerGetHotWordsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/sentiment/hotwords';
};

export type SentimentControllerGetHotWordsResponses = {
  /**
   * 成功获取热点词汇数据
   */
  200: Array<HotWordSchema>;
};

export type SentimentControllerGetHotWordsResponse =
  SentimentControllerGetHotWordsResponses[keyof SentimentControllerGetHotWordsResponses];

export type SentimentControllerGetSentimentTableDataData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/sentiment/table';
};

export type SentimentControllerGetSentimentTableDataResponses = {
  /**
   * 成功获取舆情表格数据
   */
  200: Array<SentimentTableItemSchema>;
};

export type SentimentControllerGetSentimentTableDataResponse =
  SentimentControllerGetSentimentTableDataResponses[keyof SentimentControllerGetSentimentTableDataResponses];

export type SentimentIntensityControllerFindAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/sentiment-intensity';
};

export type SentimentIntensityControllerFindAllResponses = {
  /**
   * 成功获取情感强度记录列表
   */
  200: Array<SentimentIntensityResponseDto>;
};

export type SentimentIntensityControllerFindAllResponse =
  SentimentIntensityControllerFindAllResponses[keyof SentimentIntensityControllerFindAllResponses];

export type SentimentIntensityControllerCreateData = {
  body: CreateSentimentIntensityDto;
  path?: never;
  query?: never;
  url: '/api/sentiment-intensity';
};

export type SentimentIntensityControllerCreateErrors = {
  /**
   * 请求参数验证失败
   */
  400: unknown;
};

export type SentimentIntensityControllerCreateResponses = {
  /**
   * 成功创建情感强度记录
   */
  201: CreateSentimentIntensityDto;
};

export type SentimentIntensityControllerCreateResponse =
  SentimentIntensityControllerCreateResponses[keyof SentimentIntensityControllerCreateResponses];

export type SentimentIntensityControllerSearchData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * 按标题模糊搜索
     */
    title?: string;
    /**
     * 情感强度最小值（区间搜索）
     */
    minIntensity?: number;
    /**
     * 情感强度最大值（区间搜索）
     */
    maxIntensity?: number;
  };
  url: '/api/sentiment-intensity/search';
};

export type SentimentIntensityControllerSearchResponses = {
  /**
   * 成功获取搜索结果
   */
  200: Array<CreateSentimentIntensityDto>;
};

export type SentimentIntensityControllerSearchResponse =
  SentimentIntensityControllerSearchResponses[keyof SentimentIntensityControllerSearchResponses];

export type SentimentIntensityControllerRemoveData = {
  body?: never;
  path: {
    /**
     * 情感强度记录的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/sentiment-intensity/{id}';
};

export type SentimentIntensityControllerRemoveErrors = {
  /**
   * 未找到指定ID的情感强度记录
   */
  404: unknown;
};

export type SentimentIntensityControllerRemoveResponses = {
  /**
   * 成功删除情感强度记录
   */
  200: unknown;
};

export type SentimentIntensityControllerUpdateData = {
  body: UpdateSentimentIntensityDto;
  path: {
    /**
     * 情感强度记录的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/sentiment-intensity/{id}';
};

export type SentimentIntensityControllerUpdateErrors = {
  /**
   * 未找到指定ID的情感强度记录
   */
  404: unknown;
};

export type SentimentIntensityControllerUpdateResponses = {
  /**
   * 成功更新情感强度记录
   */
  200: CreateSentimentIntensityDto;
};

export type SentimentIntensityControllerUpdateResponse =
  SentimentIntensityControllerUpdateResponses[keyof SentimentIntensityControllerUpdateResponses];

export type SentimentEventControllerFindAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/sentiment-event';
};

export type SentimentEventControllerFindAllResponses = {
  /**
   * 成功获取舆情事件记录列表
   */
  200: Array<SentimentEventResponseDto>;
};

export type SentimentEventControllerFindAllResponse =
  SentimentEventControllerFindAllResponses[keyof SentimentEventControllerFindAllResponses];

export type SentimentEventControllerCreateData = {
  body: CreateSentimentEventDto;
  path?: never;
  query?: never;
  url: '/api/sentiment-event';
};

export type SentimentEventControllerCreateErrors = {
  /**
   * 请求参数验证失败
   */
  400: unknown;
};

export type SentimentEventControllerCreateResponses = {
  /**
   * 成功创建舆情事件记录
   */
  201: CreateSentimentEventDto;
};

export type SentimentEventControllerCreateResponse =
  SentimentEventControllerCreateResponses[keyof SentimentEventControllerCreateResponses];

export type SentimentEventControllerSearchData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * 按标题模糊搜索
     */
    title?: string;
    /**
     * 情感分数最小值（区间搜索）
     */
    minScore?: number;
    /**
     * 情感分数最大值（区间搜索）
     */
    maxScore?: number;
    /**
     * 事件开始时间（时间区间搜索）
     */
    startTime?: string;
    /**
     * 事件结束时间（时间区间搜索）
     */
    endTime?: string;
  };
  url: '/api/sentiment-event/search';
};

export type SentimentEventControllerSearchResponses = {
  /**
   * 成功获取搜索结果
   */
  200: Array<CreateSentimentEventDto>;
};

export type SentimentEventControllerSearchResponse =
  SentimentEventControllerSearchResponses[keyof SentimentEventControllerSearchResponses];

export type SentimentEventControllerRemoveData = {
  body?: never;
  path: {
    /**
     * 舆情事件记录的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/sentiment-event/{id}';
};

export type SentimentEventControllerRemoveErrors = {
  /**
   * 未找到指定ID的舆情事件记录
   */
  404: unknown;
};

export type SentimentEventControllerRemoveResponses = {
  /**
   * 成功删除舆情事件记录
   */
  200: unknown;
};

export type SentimentEventControllerFindOneData = {
  body?: never;
  path: {
    /**
     * 舆情事件记录的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/sentiment-event/{id}';
};

export type SentimentEventControllerFindOneErrors = {
  /**
   * 未找到指定ID的舆情事件记录
   */
  404: unknown;
};

export type SentimentEventControllerFindOneResponses = {
  /**
   * 成功获取舆情事件记录
   */
  200: CreateSentimentEventDto;
};

export type SentimentEventControllerFindOneResponse =
  SentimentEventControllerFindOneResponses[keyof SentimentEventControllerFindOneResponses];

export type SentimentEventControllerUpdateData = {
  body: UpdateSentimentEventDto;
  path: {
    /**
     * 舆情事件记录的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/sentiment-event/{id}';
};

export type SentimentEventControllerUpdateErrors = {
  /**
   * 未找到指定ID的舆情事件记录
   */
  404: unknown;
};

export type SentimentEventControllerUpdateResponses = {
  /**
   * 成功更新舆情事件记录
   */
  200: CreateSentimentEventDto;
};

export type SentimentEventControllerUpdateResponse =
  SentimentEventControllerUpdateResponses[keyof SentimentEventControllerUpdateResponses];

export type EventTypeControllerFindAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/event-type';
};

export type EventTypeControllerFindAllResponses = {
  /**
   * 成功获取事件类型列表
   */
  200: Array<EventTypeResponseDto>;
};

export type EventTypeControllerFindAllResponse =
  EventTypeControllerFindAllResponses[keyof EventTypeControllerFindAllResponses];

export type EventTypeControllerCreateData = {
  body: CreateEventTypeDto;
  path?: never;
  query?: never;
  url: '/api/event-type';
};

export type EventTypeControllerCreateErrors = {
  /**
   * 请求参数验证失败
   */
  400: unknown;
  /**
   * 事件类型代码已存在
   */
  409: unknown;
};

export type EventTypeControllerCreateResponses = {
  /**
   * 成功创建事件类型
   */
  201: CreateEventTypeDto;
};

export type EventTypeControllerCreateResponse =
  EventTypeControllerCreateResponses[keyof EventTypeControllerCreateResponses];

export type EventTypeControllerSearchData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * 按名称模糊搜索
     */
    name?: string;
    /**
     * 按代码精确搜索
     */
    code?: string;
    /**
     * 按启用状态筛选
     */
    isActive?: boolean;
  };
  url: '/api/event-type/search';
};

export type EventTypeControllerSearchResponses = {
  /**
   * 成功获取搜索结果
   */
  200: Array<CreateEventTypeDto>;
};

export type EventTypeControllerSearchResponse =
  EventTypeControllerSearchResponses[keyof EventTypeControllerSearchResponses];

export type EventTypeControllerRemoveData = {
  body?: never;
  path: {
    /**
     * 事件类型的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/event-type/{id}';
};

export type EventTypeControllerRemoveErrors = {
  /**
   * 未找到指定ID的事件类型
   */
  404: unknown;
};

export type EventTypeControllerRemoveResponses = {
  /**
   * 成功删除事件类型
   */
  200: unknown;
};

export type EventTypeControllerFindOneData = {
  body?: never;
  path: {
    /**
     * 事件类型的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/event-type/{id}';
};

export type EventTypeControllerFindOneErrors = {
  /**
   * 未找到指定ID的事件类型
   */
  404: unknown;
};

export type EventTypeControllerFindOneResponses = {
  /**
   * 成功获取事件类型
   */
  200: CreateEventTypeDto;
};

export type EventTypeControllerFindOneResponse =
  EventTypeControllerFindOneResponses[keyof EventTypeControllerFindOneResponses];

export type EventTypeControllerUpdateData = {
  body: UpdateEventTypeDto;
  path: {
    /**
     * 事件类型的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/event-type/{id}';
};

export type EventTypeControllerUpdateErrors = {
  /**
   * 未找到指定ID的事件类型
   */
  404: unknown;
  /**
   * 事件类型代码已存在
   */
  409: unknown;
};

export type EventTypeControllerUpdateResponses = {
  /**
   * 成功更新事件类型
   */
  200: CreateEventTypeDto;
};

export type EventTypeControllerUpdateResponse =
  EventTypeControllerUpdateResponses[keyof EventTypeControllerUpdateResponses];

export type MediaTypeControllerFindAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/media-type';
};

export type MediaTypeControllerFindAllResponses = {
  /**
   * 成功获取媒体类型列表
   */
  200: Array<MediaTypeResponseDto>;
};

export type MediaTypeControllerFindAllResponse =
  MediaTypeControllerFindAllResponses[keyof MediaTypeControllerFindAllResponses];

export type MediaTypeControllerCreateData = {
  body: CreateMediaTypeDto;
  path?: never;
  query?: never;
  url: '/api/media-type';
};

export type MediaTypeControllerCreateErrors = {
  /**
   * 请求参数验证失败
   */
  400: unknown;
  /**
   * 媒体类型代码已存在
   */
  409: unknown;
};

export type MediaTypeControllerCreateResponses = {
  /**
   * 成功创建媒体类型
   */
  201: CreateMediaTypeDto;
};

export type MediaTypeControllerCreateResponse =
  MediaTypeControllerCreateResponses[keyof MediaTypeControllerCreateResponses];

export type MediaTypeControllerSearchData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * 按名称模糊搜索
     */
    name?: string;
    /**
     * 按代码精确搜索
     */
    code?: string;
    /**
     * 按启用状态筛选
     */
    isActive?: boolean;
    /**
     * 可信度等级最小值（区间搜索）
     */
    minCredibilityLevel?: number;
    /**
     * 可信度等级最大值（区间搜索）
     */
    maxCredibilityLevel?: number;
    /**
     * 按父级媒体类型ID筛选
     */
    parentId?: number;
  };
  url: '/api/media-type/search';
};

export type MediaTypeControllerSearchResponses = {
  /**
   * 成功获取搜索结果
   */
  200: Array<CreateMediaTypeDto>;
};

export type MediaTypeControllerSearchResponse =
  MediaTypeControllerSearchResponses[keyof MediaTypeControllerSearchResponses];

export type MediaTypeControllerRemoveData = {
  body?: never;
  path: {
    /**
     * 媒体类型的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/media-type/{id}';
};

export type MediaTypeControllerRemoveErrors = {
  /**
   * 未找到指定ID的媒体类型
   */
  404: unknown;
};

export type MediaTypeControllerRemoveResponses = {
  /**
   * 成功删除媒体类型
   */
  200: unknown;
};

export type MediaTypeControllerFindOneData = {
  body?: never;
  path: {
    /**
     * 媒体类型的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/media-type/{id}';
};

export type MediaTypeControllerFindOneErrors = {
  /**
   * 未找到指定ID的媒体类型
   */
  404: unknown;
};

export type MediaTypeControllerFindOneResponses = {
  /**
   * 成功获取媒体类型
   */
  200: CreateMediaTypeDto;
};

export type MediaTypeControllerFindOneResponse =
  MediaTypeControllerFindOneResponses[keyof MediaTypeControllerFindOneResponses];

export type MediaTypeControllerUpdateData = {
  body: UpdateMediaTypeDto;
  path: {
    /**
     * 媒体类型的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/media-type/{id}';
};

export type MediaTypeControllerUpdateErrors = {
  /**
   * 未找到指定ID的媒体类型
   */
  404: unknown;
  /**
   * 媒体类型代码已存在
   */
  409: unknown;
};

export type MediaTypeControllerUpdateResponses = {
  /**
   * 成功更新媒体类型
   */
  200: CreateMediaTypeDto;
};

export type MediaTypeControllerUpdateResponse =
  MediaTypeControllerUpdateResponses[keyof MediaTypeControllerUpdateResponses];
