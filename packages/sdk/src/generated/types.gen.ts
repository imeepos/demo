// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseURL: string;
};

export type CreateAgentDto = {
  /**
   * 智能体代码
   */
  code: string;
  /**
   * 智能体名称
   */
  name: string;
  /**
   * 智能体描述
   */
  description?: string;
  /**
   * 系统提示词
   */
  systemPrompt: string;
  /**
   * 温度值，控制输出随机性
   */
  temperature?: number;
  /**
   * 最大token数
   */
  maxTokens?: number;
  /**
   * 使用的模型
   */
  model?: string;
  /**
   * 是否启用
   */
  isActive?: boolean;
  /**
   * 排序权重
   */
  sortOrder?: number;
};

export type Agent = {
  [key: string]: unknown;
};

export type PaginationMeta = {
  /**
   * 当前页码
   */
  page: number;
  /**
   * 每页数量
   */
  limit: number;
  /**
   * 总记录数
   */
  total: number;
  /**
   * 总页数
   */
  totalPages: number;
  /**
   * 是否有上一页
   */
  hasPrevious: boolean;
  /**
   * 是否有下一页
   */
  hasNext: boolean;
};

export type PaginatedResponse = {
  /**
   * 数据列表
   */
  data: Array<string>;
  /**
   * 分页信息
   */
  meta: PaginationMeta;
};

export type UpdateAgentDto = {
  /**
   * 智能体名称
   */
  name?: string;
  /**
   * 智能体描述
   */
  description?: string;
  /**
   * 系统提示词
   */
  systemPrompt?: string;
  /**
   * 温度值，控制输出随机性
   */
  temperature?: number;
  /**
   * 最大token数
   */
  maxTokens?: number;
  /**
   * 使用的模型
   */
  model?: string;
  /**
   * 是否启用
   */
  isActive?: boolean;
  /**
   * 排序权重
   */
  sortOrder?: number;
};

export type ExecuteAgentDto = {
  /**
   * 智能体代码
   */
  agentCode: string;
  /**
   * 输入内容
   */
  input: string;
  /**
   * 额外上下文信息
   */
  context?: string;
};

export type AgentExecutionResult = {
  /**
   * 执行记录ID
   */
  executionId: number;
  /**
   * AI生成的输出内容
   */
  output: string;
  /**
   * 输入token数量
   */
  inputTokens: number;
  /**
   * 输出token数量
   */
  outputTokens: number;
  /**
   * 总token数量
   */
  totalTokens: number;
  /**
   * 执行时间（毫秒）
   */
  executionTime: number;
  /**
   * 使用的模型
   */
  model: string;
};

export type BatchExecuteAgentDto = {
  /**
   * 批量执行请求列表
   */
  requests: Array<ExecuteAgentDto>;
  /**
   * 执行选项
   */
  options?: {
    [key: string]: unknown;
  };
};

export type BatchExecutionResultDto = {
  /**
   * 成功执行的结果
   */
  successResults: Array<AgentExecutionResult>;
  /**
   * 失败的错误信息
   */
  errorMessages: Array<string>;
  /**
   * 成功数量
   */
  successCount: number;
  /**
   * 失败数量
   */
  failureCount: number;
  /**
   * 总数量
   */
  totalCount: number;
};

export type AgentExecution = {
  [key: string]: unknown;
};

export type AgentExecutionStatsDto = {
  /**
   * 总执行次数
   */
  total: number;
  /**
   * 成功执行次数
   */
  completed: number;
  /**
   * 失败执行次数
   */
  failed: number;
  /**
   * 运行中执行次数
   */
  running: number;
  /**
   * 等待中执行次数
   */
  pending: number;
  /**
   * 成功率（百分比）
   */
  successRate: number;
  /**
   * 总消耗token数
   */
  totalTokens: number;
  /**
   * 平均执行时间（毫秒）
   */
  averageExecutionTime: number;
  /**
   * 总执行时间（毫秒）
   */
  totalExecutionTime: number;
  /**
   * 平均输入token数
   */
  averageInputTokens: number;
  /**
   * 平均输出token数
   */
  averageOutputTokens: number;
};

export type CreateSentimentIntensityDto = {
  /**
   * 情感标题
   */
  title: string;
  /**
   * 情感强度值，范围 0.00-1.00
   */
  intensity: number;
  /**
   * 情感简介描述
   */
  description?: string;
};

export type SentimentIntensityResponseDto = {
  /**
   * 情感强度记录ID
   */
  id: number;
  /**
   * 情感标题
   */
  title: string;
  /**
   * 情感强度值
   */
  intensity: number;
};

export type UpdateSentimentIntensityDto = {
  [key: string]: unknown;
};

export type CreateSentimentEventDto = {
  /**
   * 事件标题
   */
  title: string;
  /**
   * 事件详细内容描述
   */
  content?: string;
  /**
   * 情感分数，范围 0.00 到 1.00，0表示最负面，1表示最正面，0.5为中性
   */
  score: number;
  /**
   * 纬度，支持7位小数精度
   */
  latitude: number;
  /**
   * 经度，支持7位小数精度
   */
  longitude: number;
  /**
   * 事件发生的具体地址描述
   */
  address?: string;
  /**
   * 信息来源媒体或平台
   */
  source: string;
  /**
   * 事件发生的时间戳
   */
  timestamp: string;
  /**
   * 事件热度值，范围1-10，数值越高表示关注度越高
   */
  hotness?: number;
  /**
   * 事件相关标签
   */
  tags?: Array<string>;
};

export type SentimentEventResponseDto = {
  /**
   * 事件唯一标识符
   */
  id: number;
  /**
   * 事件标题
   */
  title: string;
  /**
   * 情感分数，范围 0.00 到 1.00
   */
  score: number;
  /**
   * 信息来源媒体或平台
   */
  source: string;
  /**
   * 事件发生的时间戳
   */
  timestamp: string;
};

export type UpdateSentimentEventDto = {
  /**
   * 事件标题
   */
  title?: string;
  /**
   * 事件详细内容描述
   */
  content?: string;
  /**
   * 情感分数，范围 0.00 到 1.00，0表示最负面，1表示最正面，0.5为中性
   */
  score?: number;
  /**
   * 纬度，支持7位小数精度
   */
  latitude?: number;
  /**
   * 经度，支持7位小数精度
   */
  longitude?: number;
  /**
   * 事件发生的具体地址描述
   */
  address?: string;
  /**
   * 信息来源媒体或平台
   */
  source?: string;
  /**
   * 事件发生的时间戳
   */
  timestamp?: string;
  /**
   * 事件热度值，范围1-10，数值越高表示关注度越高
   */
  hotness?: number;
  /**
   * 事件相关标签
   */
  tags?: Array<string>;
};

export type CreateEventTypeDto = {
  /**
   * 事件类型代码，如 political, economic
   */
  code: string;
  /**
   * 事件类型名称，如 政治事件, 经济事件
   */
  name: string;
  /**
   * 事件类型详细描述
   */
  description?: string;
  /**
   * UI显示颜色代码，如 #ff6b6b
   */
  color?: string;
  /**
   * 是否启用该事件类型
   */
  isActive?: boolean;
  /**
   * 排序权重，数值越大排序越靠前
   */
  sortOrder?: number;
};

export type EventTypeResponseDto = {
  /**
   * 事件类型唯一标识
   */
  id: number;
  /**
   * 事件类型代码
   */
  code: string;
  /**
   * 事件类型名称
   */
  name: string;
  /**
   * UI显示颜色代码
   */
  color: string;
  /**
   * 是否启用
   */
  isActive: boolean;
  /**
   * 排序权重
   */
  sortOrder: number;
};

export type UpdateEventTypeDto = {
  /**
   * 事件类型代码，如 political, economic
   */
  code?: string;
  /**
   * 事件类型名称，如 政治事件, 经济事件
   */
  name?: string;
  /**
   * 事件类型详细描述
   */
  description?: string;
  /**
   * UI显示颜色代码，如 #ff6b6b
   */
  color?: string;
  /**
   * 是否启用该事件类型
   */
  isActive?: boolean;
  /**
   * 排序权重，数值越大排序越靠前
   */
  sortOrder?: number;
};

export type CreateMediaTypeDto = {
  /**
   * 媒体类型代码，如 government, self_media
   */
  code: string;
  /**
   * 媒体类型名称，如 政府部门, 自媒体
   */
  name: string;
  /**
   * 媒体类型详细描述
   */
  description?: string;
  /**
   * UI显示颜色代码，如 #ff6b6b
   */
  color?: string;
  /**
   * 可信度等级 1-10，数值越高可信度越高
   */
  credibilityLevel?: number;
  /**
   * 是否启用该媒体类型
   */
  isActive?: boolean;
  /**
   * 排序权重，数值越大排序越靠前
   */
  sortOrder?: number;
  /**
   * 父级媒体类型ID，支持层级分类
   */
  parentId?: number;
};

export type MediaTypeResponseDto = {
  /**
   * 媒体类型唯一标识
   */
  id: number;
  /**
   * 媒体类型代码
   */
  code: string;
  /**
   * 媒体类型名称
   */
  name: string;
  /**
   * UI显示颜色代码
   */
  color: string;
  /**
   * 可信度等级
   */
  credibilityLevel: number;
  /**
   * 是否启用
   */
  isActive: boolean;
  /**
   * 排序权重
   */
  sortOrder: number;
  /**
   * 父级媒体类型ID
   */
  parentId: number;
};

export type UpdateMediaTypeDto = {
  /**
   * 媒体类型代码，如 government, self_media
   */
  code?: string;
  /**
   * 媒体类型名称，如 政府部门, 自媒体
   */
  name?: string;
  /**
   * 媒体类型详细描述
   */
  description?: string;
  /**
   * UI显示颜色代码，如 #ff6b6b
   */
  color?: string;
  /**
   * 可信度等级 1-10，数值越高可信度越高
   */
  credibilityLevel?: number;
  /**
   * 是否启用该媒体类型
   */
  isActive?: boolean;
  /**
   * 排序权重，数值越大排序越靠前
   */
  sortOrder?: number;
  /**
   * 父级媒体类型ID，支持层级分类
   */
  parentId?: number;
};

export type AppControllerGetHelloData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api';
};

export type AppControllerGetHelloResponses = {
  200: unknown;
};

export type AgentControllerFindAllData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * 页码，从1开始
     */
    page?: number;
    /**
     * 每页数量，最大100
     */
    limit?: number;
    /**
     * 排序字段
     */
    sortBy?: string;
    /**
     * 排序方向
     */
    sortOrder?: 'ASC' | 'DESC';
    /**
     * 智能体代码筛选
     */
    code?: string;
    /**
     * 智能体名称筛选
     */
    name?: string;
    /**
     * 是否启用筛选
     */
    isActive?: boolean;
    /**
     * 模型筛选
     */
    model?: string;
  };
  url: '/api/agents';
};

export type AgentControllerFindAllResponses = {
  /**
   * 查询成功
   */
  200: PaginatedResponse;
};

export type AgentControllerFindAllResponse =
  AgentControllerFindAllResponses[keyof AgentControllerFindAllResponses];

export type AgentControllerCreateData = {
  body: CreateAgentDto;
  path?: never;
  query?: never;
  url: '/api/agents';
};

export type AgentControllerCreateErrors = {
  /**
   * 智能体代码已存在
   */
  409: unknown;
};

export type AgentControllerCreateResponses = {
  /**
   * 智能体创建成功
   */
  201: Agent;
};

export type AgentControllerCreateResponse =
  AgentControllerCreateResponses[keyof AgentControllerCreateResponses];

export type AgentControllerRemoveData = {
  body?: never;
  path: {
    /**
     * 智能体ID
     */
    id: number;
  };
  query?: never;
  url: '/api/agents/{id}';
};

export type AgentControllerRemoveErrors = {
  /**
   * 智能体不存在
   */
  404: unknown;
};

export type AgentControllerRemoveResponses = {
  /**
   * 删除成功（如果有执行记录则软删除）
   */
  204: void;
};

export type AgentControllerRemoveResponse =
  AgentControllerRemoveResponses[keyof AgentControllerRemoveResponses];

export type AgentControllerFindOneData = {
  body?: never;
  path: {
    /**
     * 智能体ID
     */
    id: number;
  };
  query?: never;
  url: '/api/agents/{id}';
};

export type AgentControllerFindOneErrors = {
  /**
   * 智能体不存在
   */
  404: unknown;
};

export type AgentControllerFindOneResponses = {
  /**
   * 查询成功
   */
  200: Agent;
};

export type AgentControllerFindOneResponse =
  AgentControllerFindOneResponses[keyof AgentControllerFindOneResponses];

export type AgentControllerUpdateData = {
  body: UpdateAgentDto;
  path: {
    /**
     * 智能体ID
     */
    id: number;
  };
  query?: never;
  url: '/api/agents/{id}';
};

export type AgentControllerUpdateErrors = {
  /**
   * 智能体不存在
   */
  404: unknown;
};

export type AgentControllerUpdateResponses = {
  /**
   * 更新成功
   */
  200: Agent;
};

export type AgentControllerUpdateResponse =
  AgentControllerUpdateResponses[keyof AgentControllerUpdateResponses];

export type AgentControllerToggleStatusData = {
  body?: never;
  path: {
    /**
     * 智能体ID
     */
    id: number;
  };
  query?: never;
  url: '/api/agents/{id}/toggle-status';
};

export type AgentControllerToggleStatusErrors = {
  /**
   * 智能体不存在
   */
  404: unknown;
};

export type AgentControllerToggleStatusResponses = {
  /**
   * 状态切换成功
   */
  200: Agent;
};

export type AgentControllerToggleStatusResponse =
  AgentControllerToggleStatusResponses[keyof AgentControllerToggleStatusResponses];

export type AgentControllerGetStatsData = {
  body?: never;
  path: {
    /**
     * 智能体ID
     */
    id: number;
  };
  query?: never;
  url: '/api/agents/{id}/stats';
};

export type AgentControllerGetStatsErrors = {
  /**
   * 智能体不存在
   */
  404: unknown;
};

export type AgentControllerGetStatsResponses = {
  /**
   * 统计信息获取成功
   */
  200: unknown;
};

export type AgentExecutionControllerExecuteAgentData = {
  body: ExecuteAgentDto;
  path?: never;
  query?: never;
  url: '/api/executions/execute';
};

export type AgentExecutionControllerExecuteAgentErrors = {
  /**
   * 智能体不存在
   */
  404: unknown;
  /**
   * 执行失败
   */
  500: unknown;
};

export type AgentExecutionControllerExecuteAgentResponses = {
  /**
   * 执行成功
   */
  200: AgentExecutionResult;
};

export type AgentExecutionControllerExecuteAgentResponse =
  AgentExecutionControllerExecuteAgentResponses[keyof AgentExecutionControllerExecuteAgentResponses];

export type AgentExecutionControllerBatchExecuteData = {
  /**
   * 批量执行请求
   */
  body: BatchExecuteAgentDto;
  path?: never;
  query?: never;
  url: '/api/executions/batch-execute';
};

export type AgentExecutionControllerBatchExecuteResponses = {
  /**
   * 批量执行完成
   */
  200: BatchExecutionResultDto;
};

export type AgentExecutionControllerBatchExecuteResponse =
  AgentExecutionControllerBatchExecuteResponses[keyof AgentExecutionControllerBatchExecuteResponses];

export type AgentExecutionControllerFindExecutionsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * 页码，从1开始
     */
    page?: number;
    /**
     * 每页数量，最大100
     */
    limit?: number;
    /**
     * 排序字段
     */
    sortBy?: string;
    /**
     * 排序方向
     */
    sortOrder?: 'ASC' | 'DESC';
    /**
     * 智能体ID筛选
     */
    agentId?: number;
    /**
     * 智能体代码筛选
     */
    agentCode?: string;
    /**
     * 执行状态筛选
     */
    status?: 'pending' | 'running' | 'completed' | 'failed';
    /**
     * 开始时间筛选
     */
    startDate?: string;
    /**
     * 结束时间筛选
     */
    endDate?: string;
    /**
     * 输入内容关键词筛选
     */
    inputKeyword?: string;
    /**
     * 最小执行时间筛选（毫秒）
     */
    minExecutionTime?: number;
    /**
     * 最大执行时间筛选（毫秒）
     */
    maxExecutionTime?: number;
  };
  url: '/api/executions';
};

export type AgentExecutionControllerFindExecutionsResponses = {
  /**
   * 查询成功
   */
  200: PaginatedResponse;
};

export type AgentExecutionControllerFindExecutionsResponse =
  AgentExecutionControllerFindExecutionsResponses[keyof AgentExecutionControllerFindExecutionsResponses];

export type AgentExecutionControllerGetExecutionData = {
  body?: never;
  path: {
    /**
     * 执行记录ID
     */
    id: number;
  };
  query?: never;
  url: '/api/executions/{id}';
};

export type AgentExecutionControllerGetExecutionErrors = {
  /**
   * 执行记录不存在
   */
  404: unknown;
};

export type AgentExecutionControllerGetExecutionResponses = {
  /**
   * 查询成功
   */
  200: AgentExecution;
};

export type AgentExecutionControllerGetExecutionResponse =
  AgentExecutionControllerGetExecutionResponses[keyof AgentExecutionControllerGetExecutionResponses];

export type AgentExecutionControllerGetExecutionHistoryData = {
  body?: never;
  path: {
    /**
     * 智能体代码
     */
    agentCode: string;
  };
  query?: {
    /**
     * 限制数量
     */
    limit?: number;
  };
  url: '/api/executions/history/{agentCode}';
};

export type AgentExecutionControllerGetExecutionHistoryErrors = {
  /**
   * 智能体不存在
   */
  404: unknown;
};

export type AgentExecutionControllerGetExecutionHistoryResponses = {
  /**
   * 查询成功
   */
  200: Array<AgentExecution>;
};

export type AgentExecutionControllerGetExecutionHistoryResponse =
  AgentExecutionControllerGetExecutionHistoryResponses[keyof AgentExecutionControllerGetExecutionHistoryResponses];

export type AgentExecutionControllerGetExecutionStatsData = {
  body?: never;
  path: {
    /**
     * 智能体代码
     */
    agentCode: string;
  };
  query?: never;
  url: '/api/executions/stats/{agentCode}';
};

export type AgentExecutionControllerGetExecutionStatsErrors = {
  /**
   * 智能体不存在
   */
  404: unknown;
};

export type AgentExecutionControllerGetExecutionStatsResponses = {
  /**
   * 统计信息获取成功
   */
  200: AgentExecutionStatsDto;
};

export type AgentExecutionControllerGetExecutionStatsResponse =
  AgentExecutionControllerGetExecutionStatsResponses[keyof AgentExecutionControllerGetExecutionStatsResponses];

export type AgentExecutionControllerGetExecutionsByAgentData = {
  body?: never;
  path: {
    /**
     * 智能体ID
     */
    agentId: number;
  };
  query?: {
    /**
     * 页码
     */
    page?: number;
    /**
     * 每页数量
     */
    limit?: number;
    /**
     * 排序字段
     */
    sortBy?: string;
    /**
     * 排序方向
     */
    sortOrder?: 'ASC' | 'DESC';
    /**
     * 智能体代码筛选
     */
    agentCode?: string;
    /**
     * 状态筛选
     */
    status?: 'pending' | 'running' | 'completed' | 'failed';
    /**
     * 开始时间筛选（ISO字符串）
     */
    startDate?: string;
    /**
     * 结束时间筛选（ISO字符串）
     */
    endDate?: string;
    /**
     * 输入内容关键词筛选
     */
    inputKeyword?: string;
    /**
     * 最小执行时间筛选（毫秒）
     */
    minExecutionTime?: number;
    /**
     * 最大执行时间筛选（毫秒）
     */
    maxExecutionTime?: number;
  };
  url: '/api/executions/by-agent/{agentId}';
};

export type AgentExecutionControllerGetExecutionsByAgentResponses = {
  /**
   * 查询成功
   */
  200: PaginatedResponse;
};

export type AgentExecutionControllerGetExecutionsByAgentResponse =
  AgentExecutionControllerGetExecutionsByAgentResponses[keyof AgentExecutionControllerGetExecutionsByAgentResponses];

export type AgentExecutionControllerRetryExecutionData = {
  body?: never;
  path: {
    /**
     * 执行记录ID
     */
    id: number;
  };
  query?: never;
  url: '/api/executions/retry/{id}';
};

export type AgentExecutionControllerRetryExecutionErrors = {
  /**
   * 执行记录状态不允许重试
   */
  400: unknown;
  /**
   * 执行记录不存在
   */
  404: unknown;
};

export type AgentExecutionControllerRetryExecutionResponses = {
  /**
   * 重试成功
   */
  200: AgentExecutionResult;
};

export type AgentExecutionControllerRetryExecutionResponse =
  AgentExecutionControllerRetryExecutionResponses[keyof AgentExecutionControllerRetryExecutionResponses];

export type AgentExecutionControllerGetAnalyticsOverviewData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/executions/analytics/overview';
};

export type AgentExecutionControllerGetAnalyticsOverviewResponses = {
  /**
   * 分析数据获取成功
   */
  200: unknown;
};

export type AgentExecutionControllerGetPerformanceAnalysisData = {
  body?: never;
  path: {
    /**
     * 智能体代码
     */
    agentCode: string;
  };
  query?: {
    /**
     * 分析天数
     */
    days?: number;
  };
  url: '/api/executions/analytics/performance/{agentCode}';
};

export type AgentExecutionControllerGetPerformanceAnalysisResponses = {
  /**
   * 性能分析数据获取成功
   */
  200: unknown;
};

export type SentimentIntensityControllerFindAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/sentiment-intensity';
};

export type SentimentIntensityControllerFindAllResponses = {
  /**
   * 成功获取情感强度记录列表
   */
  200: Array<SentimentIntensityResponseDto>;
};

export type SentimentIntensityControllerFindAllResponse =
  SentimentIntensityControllerFindAllResponses[keyof SentimentIntensityControllerFindAllResponses];

export type SentimentIntensityControllerCreateData = {
  body: CreateSentimentIntensityDto;
  path?: never;
  query?: never;
  url: '/api/sentiment-intensity';
};

export type SentimentIntensityControllerCreateErrors = {
  /**
   * 请求参数验证失败
   */
  400: unknown;
};

export type SentimentIntensityControllerCreateResponses = {
  /**
   * 成功创建情感强度记录
   */
  201: CreateSentimentIntensityDto;
};

export type SentimentIntensityControllerCreateResponse =
  SentimentIntensityControllerCreateResponses[keyof SentimentIntensityControllerCreateResponses];

export type SentimentIntensityControllerSearchData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * 按标题模糊搜索
     */
    title?: string;
    /**
     * 情感强度最小值（区间搜索）
     */
    minIntensity?: number;
    /**
     * 情感强度最大值（区间搜索）
     */
    maxIntensity?: number;
  };
  url: '/api/sentiment-intensity/search';
};

export type SentimentIntensityControllerSearchResponses = {
  /**
   * 成功获取搜索结果
   */
  200: Array<CreateSentimentIntensityDto>;
};

export type SentimentIntensityControllerSearchResponse =
  SentimentIntensityControllerSearchResponses[keyof SentimentIntensityControllerSearchResponses];

export type SentimentIntensityControllerRemoveData = {
  body?: never;
  path: {
    /**
     * 情感强度记录的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/sentiment-intensity/{id}';
};

export type SentimentIntensityControllerRemoveErrors = {
  /**
   * 未找到指定ID的情感强度记录
   */
  404: unknown;
};

export type SentimentIntensityControllerRemoveResponses = {
  /**
   * 成功删除情感强度记录
   */
  200: unknown;
};

export type SentimentIntensityControllerUpdateData = {
  body: UpdateSentimentIntensityDto;
  path: {
    /**
     * 情感强度记录的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/sentiment-intensity/{id}';
};

export type SentimentIntensityControllerUpdateErrors = {
  /**
   * 未找到指定ID的情感强度记录
   */
  404: unknown;
};

export type SentimentIntensityControllerUpdateResponses = {
  /**
   * 成功更新情感强度记录
   */
  200: CreateSentimentIntensityDto;
};

export type SentimentIntensityControllerUpdateResponse =
  SentimentIntensityControllerUpdateResponses[keyof SentimentIntensityControllerUpdateResponses];

export type SentimentEventControllerFindAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/sentiment-event';
};

export type SentimentEventControllerFindAllResponses = {
  /**
   * 成功获取舆情事件记录列表
   */
  200: Array<SentimentEventResponseDto>;
};

export type SentimentEventControllerFindAllResponse =
  SentimentEventControllerFindAllResponses[keyof SentimentEventControllerFindAllResponses];

export type SentimentEventControllerCreateData = {
  body: CreateSentimentEventDto;
  path?: never;
  query?: never;
  url: '/api/sentiment-event';
};

export type SentimentEventControllerCreateErrors = {
  /**
   * 请求参数验证失败
   */
  400: unknown;
};

export type SentimentEventControllerCreateResponses = {
  /**
   * 成功创建舆情事件记录
   */
  201: CreateSentimentEventDto;
};

export type SentimentEventControllerCreateResponse =
  SentimentEventControllerCreateResponses[keyof SentimentEventControllerCreateResponses];

export type SentimentEventControllerSearchData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * 按标题模糊搜索
     */
    title?: string;
    /**
     * 情感分数最小值（区间搜索）
     */
    minScore?: number;
    /**
     * 情感分数最大值（区间搜索）
     */
    maxScore?: number;
    /**
     * 事件开始时间（时间区间搜索）
     */
    startTime?: string;
    /**
     * 事件结束时间（时间区间搜索）
     */
    endTime?: string;
  };
  url: '/api/sentiment-event/search';
};

export type SentimentEventControllerSearchResponses = {
  /**
   * 成功获取搜索结果
   */
  200: Array<CreateSentimentEventDto>;
};

export type SentimentEventControllerSearchResponse =
  SentimentEventControllerSearchResponses[keyof SentimentEventControllerSearchResponses];

export type SentimentEventControllerRemoveData = {
  body?: never;
  path: {
    /**
     * 舆情事件记录的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/sentiment-event/{id}';
};

export type SentimentEventControllerRemoveErrors = {
  /**
   * 未找到指定ID的舆情事件记录
   */
  404: unknown;
};

export type SentimentEventControllerRemoveResponses = {
  /**
   * 成功删除舆情事件记录
   */
  200: unknown;
};

export type SentimentEventControllerFindOneData = {
  body?: never;
  path: {
    /**
     * 舆情事件记录的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/sentiment-event/{id}';
};

export type SentimentEventControllerFindOneErrors = {
  /**
   * 未找到指定ID的舆情事件记录
   */
  404: unknown;
};

export type SentimentEventControllerFindOneResponses = {
  /**
   * 成功获取舆情事件记录
   */
  200: CreateSentimentEventDto;
};

export type SentimentEventControllerFindOneResponse =
  SentimentEventControllerFindOneResponses[keyof SentimentEventControllerFindOneResponses];

export type SentimentEventControllerUpdateData = {
  body: UpdateSentimentEventDto;
  path: {
    /**
     * 舆情事件记录的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/sentiment-event/{id}';
};

export type SentimentEventControllerUpdateErrors = {
  /**
   * 未找到指定ID的舆情事件记录
   */
  404: unknown;
};

export type SentimentEventControllerUpdateResponses = {
  /**
   * 成功更新舆情事件记录
   */
  200: CreateSentimentEventDto;
};

export type SentimentEventControllerUpdateResponse =
  SentimentEventControllerUpdateResponses[keyof SentimentEventControllerUpdateResponses];

export type EventTypeControllerFindAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/event-type';
};

export type EventTypeControllerFindAllResponses = {
  /**
   * 成功获取事件类型列表
   */
  200: Array<EventTypeResponseDto>;
};

export type EventTypeControllerFindAllResponse =
  EventTypeControllerFindAllResponses[keyof EventTypeControllerFindAllResponses];

export type EventTypeControllerCreateData = {
  body: CreateEventTypeDto;
  path?: never;
  query?: never;
  url: '/api/event-type';
};

export type EventTypeControllerCreateErrors = {
  /**
   * 请求参数验证失败
   */
  400: unknown;
  /**
   * 事件类型代码已存在
   */
  409: unknown;
};

export type EventTypeControllerCreateResponses = {
  /**
   * 成功创建事件类型
   */
  201: CreateEventTypeDto;
};

export type EventTypeControllerCreateResponse =
  EventTypeControllerCreateResponses[keyof EventTypeControllerCreateResponses];

export type EventTypeControllerSearchData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * 按名称模糊搜索
     */
    name?: string;
    /**
     * 按代码精确搜索
     */
    code?: string;
    /**
     * 按启用状态筛选
     */
    isActive?: boolean;
  };
  url: '/api/event-type/search';
};

export type EventTypeControllerSearchResponses = {
  /**
   * 成功获取搜索结果
   */
  200: Array<CreateEventTypeDto>;
};

export type EventTypeControllerSearchResponse =
  EventTypeControllerSearchResponses[keyof EventTypeControllerSearchResponses];

export type EventTypeControllerRemoveData = {
  body?: never;
  path: {
    /**
     * 事件类型的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/event-type/{id}';
};

export type EventTypeControllerRemoveErrors = {
  /**
   * 未找到指定ID的事件类型
   */
  404: unknown;
};

export type EventTypeControllerRemoveResponses = {
  /**
   * 成功删除事件类型
   */
  200: unknown;
};

export type EventTypeControllerFindOneData = {
  body?: never;
  path: {
    /**
     * 事件类型的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/event-type/{id}';
};

export type EventTypeControllerFindOneErrors = {
  /**
   * 未找到指定ID的事件类型
   */
  404: unknown;
};

export type EventTypeControllerFindOneResponses = {
  /**
   * 成功获取事件类型
   */
  200: CreateEventTypeDto;
};

export type EventTypeControllerFindOneResponse =
  EventTypeControllerFindOneResponses[keyof EventTypeControllerFindOneResponses];

export type EventTypeControllerUpdateData = {
  body: UpdateEventTypeDto;
  path: {
    /**
     * 事件类型的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/event-type/{id}';
};

export type EventTypeControllerUpdateErrors = {
  /**
   * 未找到指定ID的事件类型
   */
  404: unknown;
  /**
   * 事件类型代码已存在
   */
  409: unknown;
};

export type EventTypeControllerUpdateResponses = {
  /**
   * 成功更新事件类型
   */
  200: CreateEventTypeDto;
};

export type EventTypeControllerUpdateResponse =
  EventTypeControllerUpdateResponses[keyof EventTypeControllerUpdateResponses];

export type MediaTypeControllerFindAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/media-type';
};

export type MediaTypeControllerFindAllResponses = {
  /**
   * 成功获取媒体类型列表
   */
  200: Array<MediaTypeResponseDto>;
};

export type MediaTypeControllerFindAllResponse =
  MediaTypeControllerFindAllResponses[keyof MediaTypeControllerFindAllResponses];

export type MediaTypeControllerCreateData = {
  body: CreateMediaTypeDto;
  path?: never;
  query?: never;
  url: '/api/media-type';
};

export type MediaTypeControllerCreateErrors = {
  /**
   * 请求参数验证失败
   */
  400: unknown;
  /**
   * 媒体类型代码已存在
   */
  409: unknown;
};

export type MediaTypeControllerCreateResponses = {
  /**
   * 成功创建媒体类型
   */
  201: CreateMediaTypeDto;
};

export type MediaTypeControllerCreateResponse =
  MediaTypeControllerCreateResponses[keyof MediaTypeControllerCreateResponses];

export type MediaTypeControllerSearchData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * 按名称模糊搜索
     */
    name?: string;
    /**
     * 按代码精确搜索
     */
    code?: string;
    /**
     * 按启用状态筛选
     */
    isActive?: boolean;
    /**
     * 可信度等级最小值（区间搜索）
     */
    minCredibilityLevel?: number;
    /**
     * 可信度等级最大值（区间搜索）
     */
    maxCredibilityLevel?: number;
    /**
     * 按父级媒体类型ID筛选
     */
    parentId?: number;
  };
  url: '/api/media-type/search';
};

export type MediaTypeControllerSearchResponses = {
  /**
   * 成功获取搜索结果
   */
  200: Array<CreateMediaTypeDto>;
};

export type MediaTypeControllerSearchResponse =
  MediaTypeControllerSearchResponses[keyof MediaTypeControllerSearchResponses];

export type MediaTypeControllerRemoveData = {
  body?: never;
  path: {
    /**
     * 媒体类型的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/media-type/{id}';
};

export type MediaTypeControllerRemoveErrors = {
  /**
   * 未找到指定ID的媒体类型
   */
  404: unknown;
};

export type MediaTypeControllerRemoveResponses = {
  /**
   * 成功删除媒体类型
   */
  200: unknown;
};

export type MediaTypeControllerFindOneData = {
  body?: never;
  path: {
    /**
     * 媒体类型的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/media-type/{id}';
};

export type MediaTypeControllerFindOneErrors = {
  /**
   * 未找到指定ID的媒体类型
   */
  404: unknown;
};

export type MediaTypeControllerFindOneResponses = {
  /**
   * 成功获取媒体类型
   */
  200: CreateMediaTypeDto;
};

export type MediaTypeControllerFindOneResponse =
  MediaTypeControllerFindOneResponses[keyof MediaTypeControllerFindOneResponses];

export type MediaTypeControllerUpdateData = {
  body: UpdateMediaTypeDto;
  path: {
    /**
     * 媒体类型的唯一标识符
     */
    id: string;
  };
  query?: never;
  url: '/api/media-type/{id}';
};

export type MediaTypeControllerUpdateErrors = {
  /**
   * 未找到指定ID的媒体类型
   */
  404: unknown;
  /**
   * 媒体类型代码已存在
   */
  409: unknown;
};

export type MediaTypeControllerUpdateResponses = {
  /**
   * 成功更新媒体类型
   */
  200: CreateMediaTypeDto;
};

export type MediaTypeControllerUpdateResponse =
  MediaTypeControllerUpdateResponses[keyof MediaTypeControllerUpdateResponses];
