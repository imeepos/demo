// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { AppControllerGetHelloData, AppControllerGetHelloResponses, SentimentControllerGetAllEventsData, SentimentControllerGetAllEventsResponses, SentimentControllerGetEventByIdData, SentimentControllerGetEventByIdErrors, SentimentControllerGetEventByIdResponses, SentimentControllerGetHotWordsData, SentimentControllerGetHotWordsResponses, SentimentControllerGetMetricsData, SentimentControllerGetMetricsResponses, SentimentControllerGetSentimentTableDataData, SentimentControllerGetSentimentTableDataResponses, SentimentIntensityControllerCreateData, SentimentIntensityControllerCreateErrors, SentimentIntensityControllerCreateResponses, SentimentIntensityControllerFindAllData, SentimentIntensityControllerFindAllResponses, SentimentIntensityControllerRemoveData, SentimentIntensityControllerRemoveErrors, SentimentIntensityControllerRemoveResponses, SentimentIntensityControllerSearchData, SentimentIntensityControllerSearchResponses, SentimentIntensityControllerUpdateData, SentimentIntensityControllerUpdateErrors, SentimentIntensityControllerUpdateResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetHelloData, ThrowOnError>) => {
    return (options?.client ?? client).get<AppControllerGetHelloResponses, unknown, ThrowOnError>({
        url: '/api',
        ...options
    });
};

/**
 * 获取所有舆情事件
 * 获取系统中所有舆情事件的完整列表，包含事件详情、地理位置、情感分析结果等信息
 */
export const sentimentControllerGetAllEvents = <ThrowOnError extends boolean = false>(options?: Options<SentimentControllerGetAllEventsData, ThrowOnError>) => {
    return (options?.client ?? client).get<SentimentControllerGetAllEventsResponses, unknown, ThrowOnError>({
        url: '/api/sentiment/events',
        ...options
    });
};

/**
 * 根据ID获取单个舆情事件
 * 根据事件唯一标识符获取特定舆情事件的详细信息
 */
export const sentimentControllerGetEventById = <ThrowOnError extends boolean = false>(options: Options<SentimentControllerGetEventByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<SentimentControllerGetEventByIdResponses, SentimentControllerGetEventByIdErrors, ThrowOnError>({
        url: '/api/sentiment/events/{id}',
        ...options
    });
};

/**
 * 获取舆情统计指标
 * 获取舆情分析的统计数据，包含正面、负面、中性情感的数量和比例信息
 */
export const sentimentControllerGetMetrics = <ThrowOnError extends boolean = false>(options?: Options<SentimentControllerGetMetricsData, ThrowOnError>) => {
    return (options?.client ?? client).get<SentimentControllerGetMetricsResponses, unknown, ThrowOnError>({
        url: '/api/sentiment/metrics',
        ...options
    });
};

/**
 * 获取热点词汇数据
 * 获取当前热门词汇的统计信息，包含词汇出现频次和整体情感倾向
 */
export const sentimentControllerGetHotWords = <ThrowOnError extends boolean = false>(options?: Options<SentimentControllerGetHotWordsData, ThrowOnError>) => {
    return (options?.client ?? client).get<SentimentControllerGetHotWordsResponses, unknown, ThrowOnError>({
        url: '/api/sentiment/hotwords',
        ...options
    });
};

/**
 * 获取舆情表格显示数据
 * 获取适合在表格中展示的简化舆情数据，包含关键信息字段
 */
export const sentimentControllerGetSentimentTableData = <ThrowOnError extends boolean = false>(options?: Options<SentimentControllerGetSentimentTableDataData, ThrowOnError>) => {
    return (options?.client ?? client).get<SentimentControllerGetSentimentTableDataResponses, unknown, ThrowOnError>({
        url: '/api/sentiment/table',
        ...options
    });
};

/**
 * 获取所有情感强度记录
 * 获取系统中所有情感强度记录，返回简化数据（仅包含id、title、intensity字段）
 */
export const sentimentIntensityControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<SentimentIntensityControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<SentimentIntensityControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/api/sentiment-intensity',
        ...options
    });
};

/**
 * 创建情感强度记录
 * 创建新的情感强度记录，包含标题、强度值和可选的描述信息
 */
export const sentimentIntensityControllerCreate = <ThrowOnError extends boolean = false>(options: Options<SentimentIntensityControllerCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<SentimentIntensityControllerCreateResponses, SentimentIntensityControllerCreateErrors, ThrowOnError>({
        url: '/api/sentiment-intensity',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 搜索情感强度记录
 * 根据标题和/或强度值搜索情感强度记录
 */
export const sentimentIntensityControllerSearch = <ThrowOnError extends boolean = false>(options?: Options<SentimentIntensityControllerSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<SentimentIntensityControllerSearchResponses, unknown, ThrowOnError>({
        url: '/api/sentiment-intensity/search',
        ...options
    });
};

/**
 * 删除情感强度记录
 * 根据ID删除指定的情感强度记录
 */
export const sentimentIntensityControllerRemove = <ThrowOnError extends boolean = false>(options: Options<SentimentIntensityControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? client).delete<SentimentIntensityControllerRemoveResponses, SentimentIntensityControllerRemoveErrors, ThrowOnError>({
        url: '/api/sentiment-intensity/{id}',
        ...options
    });
};

/**
 * 更新情感强度记录
 * 根据ID更新指定的情感强度记录信息
 */
export const sentimentIntensityControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<SentimentIntensityControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<SentimentIntensityControllerUpdateResponses, SentimentIntensityControllerUpdateErrors, ThrowOnError>({
        url: '/api/sentiment-intensity/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
