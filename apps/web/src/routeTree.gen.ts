/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as SentimentIntensityRouteImport } from './routes/sentiment-intensity';
import { Route as SentimentEventRouteImport } from './routes/sentiment-event';
import { Route as MediaTypeRouteImport } from './routes/media-type';
import { Route as LayoutMinimalDemoRouteImport } from './routes/layout-minimal-demo';
import { Route as LayoutBasicDemoRouteImport } from './routes/layout-basic-demo';
import { Route as EventTypeRouteImport } from './routes/event-type';
import { Route as EnhancedDashboardRouteImport } from './routes/enhanced-dashboard';
import { Route as DataVisualizationRouteImport } from './routes/data-visualization';
import { Route as DashboardViewRouteImport } from './routes/dashboard-view';
import { Route as DashboardRouteImport } from './routes/dashboard';
import { Route as ColorTestRouteImport } from './routes/color-test';
import { Route as AdminDashboardRouteImport } from './routes/admin-dashboard';
import { Route as IndexRouteImport } from './routes/index';

const SentimentIntensityRoute = SentimentIntensityRouteImport.update({
  id: '/sentiment-intensity',
  path: '/sentiment-intensity',
  getParentRoute: () => rootRouteImport,
} as any);
const SentimentEventRoute = SentimentEventRouteImport.update({
  id: '/sentiment-event',
  path: '/sentiment-event',
  getParentRoute: () => rootRouteImport,
} as any);
const MediaTypeRoute = MediaTypeRouteImport.update({
  id: '/media-type',
  path: '/media-type',
  getParentRoute: () => rootRouteImport,
} as any);
const LayoutMinimalDemoRoute = LayoutMinimalDemoRouteImport.update({
  id: '/layout-minimal-demo',
  path: '/layout-minimal-demo',
  getParentRoute: () => rootRouteImport,
} as any);
const LayoutBasicDemoRoute = LayoutBasicDemoRouteImport.update({
  id: '/layout-basic-demo',
  path: '/layout-basic-demo',
  getParentRoute: () => rootRouteImport,
} as any);
const EventTypeRoute = EventTypeRouteImport.update({
  id: '/event-type',
  path: '/event-type',
  getParentRoute: () => rootRouteImport,
} as any);
const EnhancedDashboardRoute = EnhancedDashboardRouteImport.update({
  id: '/enhanced-dashboard',
  path: '/enhanced-dashboard',
  getParentRoute: () => rootRouteImport,
} as any);
const DataVisualizationRoute = DataVisualizationRouteImport.update({
  id: '/data-visualization',
  path: '/data-visualization',
  getParentRoute: () => rootRouteImport,
} as any);
const DashboardViewRoute = DashboardViewRouteImport.update({
  id: '/dashboard-view',
  path: '/dashboard-view',
  getParentRoute: () => rootRouteImport,
} as any);
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any);
const ColorTestRoute = ColorTestRouteImport.update({
  id: '/color-test',
  path: '/color-test',
  getParentRoute: () => rootRouteImport,
} as any);
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/admin-dashboard',
  path: '/admin-dashboard',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/admin-dashboard': typeof AdminDashboardRoute;
  '/color-test': typeof ColorTestRoute;
  '/dashboard': typeof DashboardRoute;
  '/dashboard-view': typeof DashboardViewRoute;
  '/data-visualization': typeof DataVisualizationRoute;
  '/enhanced-dashboard': typeof EnhancedDashboardRoute;
  '/event-type': typeof EventTypeRoute;
  '/layout-basic-demo': typeof LayoutBasicDemoRoute;
  '/layout-minimal-demo': typeof LayoutMinimalDemoRoute;
  '/media-type': typeof MediaTypeRoute;
  '/sentiment-event': typeof SentimentEventRoute;
  '/sentiment-intensity': typeof SentimentIntensityRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/admin-dashboard': typeof AdminDashboardRoute;
  '/color-test': typeof ColorTestRoute;
  '/dashboard': typeof DashboardRoute;
  '/dashboard-view': typeof DashboardViewRoute;
  '/data-visualization': typeof DataVisualizationRoute;
  '/enhanced-dashboard': typeof EnhancedDashboardRoute;
  '/event-type': typeof EventTypeRoute;
  '/layout-basic-demo': typeof LayoutBasicDemoRoute;
  '/layout-minimal-demo': typeof LayoutMinimalDemoRoute;
  '/media-type': typeof MediaTypeRoute;
  '/sentiment-event': typeof SentimentEventRoute;
  '/sentiment-intensity': typeof SentimentIntensityRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/admin-dashboard': typeof AdminDashboardRoute;
  '/color-test': typeof ColorTestRoute;
  '/dashboard': typeof DashboardRoute;
  '/dashboard-view': typeof DashboardViewRoute;
  '/data-visualization': typeof DataVisualizationRoute;
  '/enhanced-dashboard': typeof EnhancedDashboardRoute;
  '/event-type': typeof EventTypeRoute;
  '/layout-basic-demo': typeof LayoutBasicDemoRoute;
  '/layout-minimal-demo': typeof LayoutMinimalDemoRoute;
  '/media-type': typeof MediaTypeRoute;
  '/sentiment-event': typeof SentimentEventRoute;
  '/sentiment-intensity': typeof SentimentIntensityRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/admin-dashboard'
    | '/color-test'
    | '/dashboard'
    | '/dashboard-view'
    | '/data-visualization'
    | '/enhanced-dashboard'
    | '/event-type'
    | '/layout-basic-demo'
    | '/layout-minimal-demo'
    | '/media-type'
    | '/sentiment-event'
    | '/sentiment-intensity';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/admin-dashboard'
    | '/color-test'
    | '/dashboard'
    | '/dashboard-view'
    | '/data-visualization'
    | '/enhanced-dashboard'
    | '/event-type'
    | '/layout-basic-demo'
    | '/layout-minimal-demo'
    | '/media-type'
    | '/sentiment-event'
    | '/sentiment-intensity';
  id:
    | '__root__'
    | '/'
    | '/admin-dashboard'
    | '/color-test'
    | '/dashboard'
    | '/dashboard-view'
    | '/data-visualization'
    | '/enhanced-dashboard'
    | '/event-type'
    | '/layout-basic-demo'
    | '/layout-minimal-demo'
    | '/media-type'
    | '/sentiment-event'
    | '/sentiment-intensity';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AdminDashboardRoute: typeof AdminDashboardRoute;
  ColorTestRoute: typeof ColorTestRoute;
  DashboardRoute: typeof DashboardRoute;
  DashboardViewRoute: typeof DashboardViewRoute;
  DataVisualizationRoute: typeof DataVisualizationRoute;
  EnhancedDashboardRoute: typeof EnhancedDashboardRoute;
  EventTypeRoute: typeof EventTypeRoute;
  LayoutBasicDemoRoute: typeof LayoutBasicDemoRoute;
  LayoutMinimalDemoRoute: typeof LayoutMinimalDemoRoute;
  MediaTypeRoute: typeof MediaTypeRoute;
  SentimentEventRoute: typeof SentimentEventRoute;
  SentimentIntensityRoute: typeof SentimentIntensityRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sentiment-intensity': {
      id: '/sentiment-intensity';
      path: '/sentiment-intensity';
      fullPath: '/sentiment-intensity';
      preLoaderRoute: typeof SentimentIntensityRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/sentiment-event': {
      id: '/sentiment-event';
      path: '/sentiment-event';
      fullPath: '/sentiment-event';
      preLoaderRoute: typeof SentimentEventRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/media-type': {
      id: '/media-type';
      path: '/media-type';
      fullPath: '/media-type';
      preLoaderRoute: typeof MediaTypeRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/layout-minimal-demo': {
      id: '/layout-minimal-demo';
      path: '/layout-minimal-demo';
      fullPath: '/layout-minimal-demo';
      preLoaderRoute: typeof LayoutMinimalDemoRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/layout-basic-demo': {
      id: '/layout-basic-demo';
      path: '/layout-basic-demo';
      fullPath: '/layout-basic-demo';
      preLoaderRoute: typeof LayoutBasicDemoRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/event-type': {
      id: '/event-type';
      path: '/event-type';
      fullPath: '/event-type';
      preLoaderRoute: typeof EventTypeRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/enhanced-dashboard': {
      id: '/enhanced-dashboard';
      path: '/enhanced-dashboard';
      fullPath: '/enhanced-dashboard';
      preLoaderRoute: typeof EnhancedDashboardRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/data-visualization': {
      id: '/data-visualization';
      path: '/data-visualization';
      fullPath: '/data-visualization';
      preLoaderRoute: typeof DataVisualizationRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/dashboard-view': {
      id: '/dashboard-view';
      path: '/dashboard-view';
      fullPath: '/dashboard-view';
      preLoaderRoute: typeof DashboardViewRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/dashboard': {
      id: '/dashboard';
      path: '/dashboard';
      fullPath: '/dashboard';
      preLoaderRoute: typeof DashboardRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/color-test': {
      id: '/color-test';
      path: '/color-test';
      fullPath: '/color-test';
      preLoaderRoute: typeof ColorTestRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/admin-dashboard': {
      id: '/admin-dashboard';
      path: '/admin-dashboard';
      fullPath: '/admin-dashboard';
      preLoaderRoute: typeof AdminDashboardRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  ColorTestRoute: ColorTestRoute,
  DashboardRoute: DashboardRoute,
  DashboardViewRoute: DashboardViewRoute,
  DataVisualizationRoute: DataVisualizationRoute,
  EnhancedDashboardRoute: EnhancedDashboardRoute,
  EventTypeRoute: EventTypeRoute,
  LayoutBasicDemoRoute: LayoutBasicDemoRoute,
  LayoutMinimalDemoRoute: LayoutMinimalDemoRoute,
  MediaTypeRoute: MediaTypeRoute,
  SentimentEventRoute: SentimentEventRoute,
  SentimentIntensityRoute: SentimentIntensityRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
