version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:16-alpine
    container_name: sker_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sker_db}
      POSTGRES_USER: ${POSTGRES_USER:-sker_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sker_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - sker_network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-sker_user} -d ${POSTGRES_DB:-sker_db}',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 缓存数据库
  redis:
    image: redis:7-alpine
    container_name: sker_redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-sker_redis_password}
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-sker_redis_password}
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - sker_network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ 消息队列
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: sker_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-sker_admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-sker_rabbitmq_password}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-sker_vhost}
    ports:
      - '${RABBITMQ_PORT:-5672}:5672'
      - '${RABBITMQ_MANAGEMENT_PORT:-15672}:15672'
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - sker_network
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB 文档数据库
  mongodb:
    image: mongo:7
    container_name: sker_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-sker_mongo_password}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-sker_mongo_db}
    ports:
      - '${MONGO_PORT:-27017}:27017'
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./docker/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - sker_network
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Express - MongoDB 管理界面 (可选)
  mongo-express:
    image: mongo-express:1.0-alpine
    container_name: sker_mongo_express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USER:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-sker_mongo_password}
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-sker_express_password}
    ports:
      - '${MONGO_EXPRESS_PORT:-8081}:8081'
    depends_on:
      - mongodb
    networks:
      - sker_network

  # pgAdmin - PostgreSQL 管理界面 (可选)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: sker_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@sker.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-sker_pgadmin_password}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - '${PGADMIN_PORT:-8080}:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - sker_network

# 数据卷定义
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  pgadmin_data:
    driver: local

# 网络定义
networks:
  sker_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
